# Dependências instaladas

- npm i -g @nestjs/cli
//CLI do nestjs


- npm install class-validator 
//Validação de dados

- npm install class-transformer
//Transforma os dados

- npm install @types/uuid
//Tipagem do uuid

- npm install @nestjs/typeorm typeorm
//ORM

- npm install @nestjs/config
//Configuração de variáveis de ambiente

- npm install pg
//Instalando o postgress

- npm install typeorm -g
//Instalando a CLI do TypeORM

- npm install dotenv
//Instalando o dotenv

-  npm i bcrypt@5.1.0 -E
//Instalando o bcrypt

- npm i --save-dev @types/bcrypt
//Instalando os tipos do bcrypt
 
// Para gerar uma SECRET_KEY (salt) valida:
node --entra no ambiente node
const bcrypt = require('bcrypt'); --importa o bcrypt
bcrypt.genSaltSync(10); --Gera uma key aleatória


//Instalação do JWT:
- npm install @nestjs/jwt@10.1.0


---------------------------
# Docker

- docker-compose up -d
//Inicia o docker de acordo com as configurações do arquivo yaml

- docker-compose down
//Encerra os containers docker e remove TUDO

- acessar: http://localhost:8081/browser/
Criar o banco de dados

- docker images
//Mostrar imagens criadas
-------------------------

# TypeORM
# Script para facilitar: 

````````````
"typeorm": "typeorm-ts-node-esm --dataSource src/database/data-source-cli.ts"
````````````

- npm run typeorm migration:show
//Mostra as migrations

- npm run typeorm migration:generate src/database/migrations/ "nome da migration"
//Cria uma nova versão da migration

- npm run typeorm migration:run
//Executa as migrations

- npm run typeorm migration:revert
//Reverte as migrations

-------------------------
# NestJS 

- nest g resource "nome da entidade" 
//Gerador de CRUD (Controller, Service, Module,Teste)

- nest g resource "nome da entidade" --no-spec
//Gerador de CRUD sem teste(Controller, Service, Module)

Exemplo de uso?

- nest g resource modules/usuario --no-spec

Gera o modulo de autenticaçaõ
- nest g guard modules/auth --no-spec
-------------------------
# Anotações sobre o DockerFile (Copie e cole em um DockerFile para melhor visualização)

#Escolhi a imagem do node alpine por ser uma imagem mais leve e que não possui o npm instalado, o que é bom para o ambiente de produção, pois não precisamos do npm para rodar a aplicação, apenas para instalar as dependências.
FROM node:alpine AS build 

#Copia o package.json e o package-lock.json para o diretório /app
#Copia um determinado arquivo para um determinado caminho DENTRO do container
COPY Anotações.txt /app/Anotações.txt

#Assim como o ADD, o COPY também copia arquivos para dentro do container, porém, o COPY não descompacta arquivos .tar.gz nem aceita LINKS, e Dowloads de arquivos remotos
ADD Anotações.txt /app/Anotações.txt

#Executa o comando dentro do container
RUN mkdir /app

#Executa comandos apenas DEPOIS que o container for criado e incializado
CMD ["echo", "Hello World!", "/app"]

#Tambem executa comandos apenas DEPOIS que o container for criado e incializado, porém, o ENTRYPOINT não permite que o comando seja sobrescrito e permite utilizar CMD como argumento/parâmetro
ENTRYPOINT [ "executable" ]

#Define o diretório de trabalho para o caminho especificado(Define a raiz do container)
WORKDIR /the/workdir/path

#Faz a criação das variáveis de ambiente
ENV DB_HOST=.env

#Expõe a porta do container quando o container for executado
EXPOSE 8080













# Comandos 
- nest new Karto
//Cria um novo projeto nestjs